QEMU with STM32 Microcontroller Implementation

Official Homepage: http://beckus.github.io/qemu_stm32/

OVERVIEW
This is a copy of QEMU that has been modified to include an implementation
of the STM32 microcontroller.  It also implements an Olimex STM32_P103
developmentvboard.  This project runs the demos located in the
stm32_p103_demos project located at: https://github.com/beckus/stm32_p103_demos .

Commands for a typical build:
./configure --enable-debug --target-list="arm-softmmu"
make

Useful make commands when rebuilding:
    make defconfig
    make clean

If you receive a warning during compilation, this may cause the build to fail.
In this case you can pass the following option to the "configure" command to
ignore warnings:
    --disable-werror

The generated executable is arm-softmmu/qemu-system-arm .

Other configure options which control the STM32 implementation:

    --extra-cflags=-DDEBUG_CLKTREE
        Print out clock tree debug statements.

    --extra-cflags=-DDEBUG_STM32_RCC
    --extra-cflags=-DDEBUG_STM32_UART
    --extra-cflags=-DDEBUG_STM32_TIMER
        Print debug statements for specific peripherals.

    --extra-cflags=-DSTM32_UART_NO_BAUD_DELAY
        Disable the BAUD rate timing simulation
        (i.e. the UART will transmit or receive as fast as possible, rather than
        using a realistic delay).

    --extra-cflags=-DSTM32_UART_ENABLE_OVERRUN
        Enable setting of the overrun flag if a character is
        received before the last one is processed.  If this is not set, the UART
        will not receive the next character until the previous one is read by
        software.  Although less realisitic, this is safer in case the VM is
        running slow.

Other QEMU configure options which are useful for troubleshooting:
    --extra-cflags=-DDEBUG_GIC

qemu-system-arm options which are useful for trobuleshooting:
    -d ?
        To see available log levels

    -d unimp,guest
        Enable logging to view warnings when an unimplemented register is
        accessed or when an invalid register access is attempted.  This is
        especially useful since many registers are not implemented.

    -d cpu,in_asm
        Enable logging to view the CPU state during execution and the ARM
        instructions which are being executed.  I believe --enable-debug must be
        used for this to work.
        By default, you can find the output in /tmp/qemu.log:

UNIT TESTING
Unit test scripts are included for the STM32 implementation.
These test will be executed when running "make" with the standard
check targets (see tests/Makefile for documentation of QEMU's unit
testing features):
    make check
    make check-qtest-arm



The original QEMU README follows:

Read the documentation in qemu-doc.html or on http://wiki.qemu-project.org
         QEMU README
         ===========

QEMU is a generic and open source machine & userspace emulator and
virtualizer.

QEMU is capable of emulating a complete machine in software without any
need for hardware virtualization support. By using dynamic translation,
it achieves very good performance. QEMU can also integrate with the Xen
and KVM hypervisors to provide emulated hardware while allowing the
hypervisor to manage the CPU. With hypervisor support, QEMU can achieve
near native performance for CPUs. When QEMU emulates CPUs directly it is
capable of running operating systems made for one machine (e.g. an ARMv7
board) on a different machine (e.g. an x86_64 PC board).

QEMU is also capable of providing userspace API virtualization for Linux
and BSD kernel interfaces. This allows binaries compiled against one
architecture ABI (e.g. the Linux PPC64 ABI) to be run on a host using a
different architecture ABI (e.g. the Linux x86_64 ABI). This does not
involve any hardware emulation, simply CPU and syscall emulation.

QEMU aims to fit into a variety of use cases. It can be invoked directly
by users wishing to have full control over its behaviour and settings.
It also aims to facilitate integration into higher level management
layers, by providing a stable command line interface and monitor API.
It is commonly invoked indirectly via the libvirt library when using
open source applications such as oVirt, OpenStack and virt-manager.

QEMU as a whole is released under the GNU General Public License,
version 2. For full licensing details, consult the LICENSE file.


Building
========

QEMU is multi-platform software intended to be buildable on all modern
Linux platforms, OS-X, Win32 (via the Mingw64 toolchain) and a variety
of other UNIX targets. The simple steps to build QEMU are:

  mkdir build
  cd build
  ../configure
  make

Additional information can also be found online via the QEMU website:

  http://qemu-project.org/Hosts/Linux
  http://qemu-project.org/Hosts/Mac
  http://qemu-project.org/Hosts/W32


Submitting patches
==================

The QEMU source code is maintained under the GIT version control system.

   git clone git://git.qemu-project.org/qemu.git

When submitting patches, the preferred approach is to use 'git
format-patch' and/or 'git send-email' to format & send the mail to the
qemu-devel@nongnu.org mailing list. All patches submitted must contain
a 'Signed-off-by' line from the author. Patches should follow the
guidelines set out in the HACKING and CODING_STYLE files.

Additional information on submitting patches can be found online via
the QEMU website

  http://qemu-project.org/Contribute/SubmitAPatch
  http://qemu-project.org/Contribute/TrivialPatches


Bug reporting
=============

The QEMU project uses Launchpad as its primary upstream bug tracker. Bugs
found when running code built from QEMU git or upstream released sources
should be reported via:

  https://bugs.launchpad.net/qemu/

If using QEMU via an operating system vendor pre-built binary package, it
is preferable to report bugs to the vendor's own bug tracker first. If
the bug is also known to affect latest upstream code, it can also be
reported via launchpad.

For additional information on bug reporting consult:

  http://qemu-project.org/Contribute/ReportABug


Contact
=======

The QEMU community can be contacted in a number of ways, with the two
main methods being email and IRC

 - qemu-devel@nongnu.org
   http://lists.nongnu.org/mailman/listinfo/qemu-devel
 - #qemu on irc.oftc.net

Information on additional methods of contacting the community can be
found online via the QEMU website:

  http://qemu-project.org/Contribute/StartHere

-- End
